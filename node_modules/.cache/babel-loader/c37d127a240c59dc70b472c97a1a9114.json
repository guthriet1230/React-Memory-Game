{"ast":null,"code":"import _classCallCheck from \"/Users/tylerguthrie/Documents/Github/React-Memory-Game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tylerguthrie/Documents/Github/React-Memory-Game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tylerguthrie/Documents/Github/React-Memory-Game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tylerguthrie/Documents/Github/React-Memory-Game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tylerguthrie/Documents/Github/React-Memory-Game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tylerguthrie/Documents/Github/React-Memory-Game/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Tile from \"./components/Tile\";\nimport Description from \"./components/Description\";\n\nfunction gameReset(arr) {\n  arr.forEach(function (name) {\n    return name.checked = false;\n  });\n}\n\n;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentScore: 0,\n      topScore: 0,\n      message: \"You've Guessed Correctly\",\n      tiles: [{\n        id: 0,\n        name: \"Robb\",\n        image: \"images/Robb.jpeg\"\n      }, {\n        id: 1,\n        name: \"Sansa\",\n        image: \"images/Sansa.jpg\"\n      }, {\n        id: 2,\n        name: \"Jon\",\n        image: \"images/Jon.jpg\"\n      }, {\n        id: 3,\n        name: \"Tyrion\",\n        image: \"images/Tyrion.jpg\"\n      }, {\n        id: 4,\n        name: \"Cersei\",\n        image: \"images/Cersei.jpg\"\n      }, {\n        id: 5,\n        name: \"Jamie\",\n        image: \"images/Jamie.jpg\"\n      }, {\n        id: 6,\n        name: \"Drogo\",\n        image: \"images/Drogo.jpeg\"\n      }, {\n        id: 7,\n        name: \"Khaleesi\",\n        image: \"images/Khaleesi.jpg\"\n      }, {\n        id: 8,\n        name: \"Ned Stark\",\n        image: \"images/Ned.jpeg\"\n      }, {\n        id: 9,\n        name: \"Night King\",\n        image: \"images/King.jpg\"\n      }, {\n        id: 10,\n        name: \"Grey Worm\",\n        image: \"images/Worm.jpeg\"\n      }, {\n        id: 11,\n        name: \"Theon Greyjoy\",\n        image: \"images/Theon.png\"\n      }]\n    };\n\n    _this.handleTileClick = function (id) {\n      // console.log(`You've clicked ${id}`);\n      //* check to see if this has been clicked before!\n      _this.state.tiles.forEach(function (tile) {\n        if (tile.id === id) {\n          if (tile.checked === true) {\n            // console.log(\"you've clicked the same tile twice\");\n            _this.setState({\n              message: \"Whoops! You clicked the same tile. Try Again\"\n            });\n\n            if (_this.state.currentScore > _this.state.topscore) {\n              _this.setState({\n                topscore: _this.state.currentScore\n              });\n\n              _this.setState({\n                currentScore: 0\n              });\n\n              gameReset(_this.state.tiles);\n            } else {\n              _this.setState({\n                currentScore: 0\n              });\n\n              gameReset(_this.state.tiles);\n            }\n          } else {\n            tile.checked = true; //update the score\n\n            _this.setState({\n              currentScore: _this.state.currentScore + 1\n            }); //if the score is greater than the top score, update the top score too.\n\n\n            _this.setState({\n              message: \"Well Done. Keep Going!\"\n            }); //randomize the tiles\n\n\n            var tiles = _this.state.tiles.slice(0);\n\n            tiles.sort(function () {\n              return Math.random() - 0.5;\n            });\n\n            _this.setState({\n              tiles: tiles\n            });\n          }\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Header, {\n        currentScore: this.state.currentScore,\n        topScore: this.state.topScore,\n        message: this.state.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"game-board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, this.state.tiles.map(function (tile, i) {\n        return React.createElement(Tile, {\n          key: i,\n          id: tile.id,\n          handleTileClick: _this2.handleTileClick,\n          char: tile.name,\n          image: tile.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/tylerguthrie/Documents/Github/React-Memory-Game/src/App.js"],"names":["React","Component","Header","Tile","Description","gameReset","arr","forEach","name","checked","App","state","currentScore","topScore","message","tiles","id","image","handleTileClick","tile","setState","topscore","slice","sort","Math","random","map","i"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport Tile from \"./components/Tile\";\r\nimport Description from \"./components/Description\";\r\n\r\nfunction gameReset(arr) {\r\n  arr.forEach(name => name.checked = false )\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    currentScore: 0,\r\n    topScore: 0,\r\n    message: \"You've Guessed Correctly\",\r\n    tiles: [\r\n      {\r\n        id: 0,\r\n        name: \"Robb\",\r\n        image: \"images/Robb.jpeg\"\r\n      },\r\n      {\r\n        id: 1,\r\n        name: \"Sansa\",\r\n        image: \"images/Sansa.jpg\"\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Jon\",\r\n        image: \"images/Jon.jpg\"\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"Tyrion\",\r\n        image: \"images/Tyrion.jpg\"\r\n      },\r\n      {\r\n        id: 4,\r\n        name: \"Cersei\",\r\n        image: \"images/Cersei.jpg\"\r\n      },\r\n      {\r\n        id: 5,\r\n        name: \"Jamie\",\r\n        image: \"images/Jamie.jpg\"\r\n      },\r\n      {\r\n        id: 6,\r\n        name: \"Drogo\",\r\n        image: \"images/Drogo.jpeg\"\r\n      },\r\n      {\r\n        id: 7,\r\n        name: \"Khaleesi\",\r\n        image: \"images/Khaleesi.jpg\"\r\n      },  \r\n      {\r\n        id: 8,\r\n        name: \"Ned Stark\",\r\n        image: \"images/Ned.jpeg\"\r\n      },\r\n      {\r\n        id: 9,\r\n        name: \"Night King\",\r\n        image: \"images/King.jpg\"\r\n      },\r\n      {\r\n        id: 10,\r\n        name: \"Grey Worm\",\r\n        image: \"images/Worm.jpeg\"\r\n      },\r\n      {\r\n        id: 11,\r\n        name: \"Theon Greyjoy\",\r\n        image: \"images/Theon.png\"\r\n      }\r\n    ]\r\n  };\r\n\r\n\r\n\r\n  \r\n\r\n  handleTileClick = id => {\r\n    // console.log(`You've clicked ${id}`);\r\n\r\n    //* check to see if this has been clicked before!\r\n    this.state.tiles.forEach(tile => {\r\n      if (tile.id === id) {\r\n        if (tile.checked === true) {\r\n          // console.log(\"you've clicked the same tile twice\");\r\n          this.setState({ message: \"Whoops! You clicked the same tile. Try Again\" })\r\n          if (this.state.currentScore > this.state.topscore) {\r\n            this.setState({ topscore: this.state.currentScore });\r\n            this.setState({ currentScore: 0 });\r\n            gameReset(this.state.tiles)\r\n          } else{\r\n            this.setState({ currentScore: 0 });\r\n            gameReset(this.state.tiles)\r\n          }\r\n        } else {\r\n          tile.checked = true;\r\n          \r\n          //update the score\r\n          this.setState({ currentScore: this.state.currentScore + 1 });\r\n        \r\n          //if the score is greater than the top score, update the top score too.\r\n          this.setState({ message: \"Well Done. Keep Going!\" });\r\n\r\n          //randomize the tiles\r\n          let tiles = this.state.tiles.slice(0);\r\n          tiles.sort(() => Math.random() - 0.5);\r\n          this.setState({tiles})\r\n        }\r\n      }\r\n    });\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Header\r\n          currentScore={this.state.currentScore}\r\n          topScore={this.state.topScore}\r\n          message={this.state.message}\r\n        />\r\n        <div className=\"game-board\">\r\n          {this.state.tiles.map((tile, i) => (\r\n            <Tile\r\n              key={i}\r\n              id={tile.id}\r\n              handleTileClick={this.handleTileClick}\r\n              char={tile.name}\r\n              image={tile.image}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}