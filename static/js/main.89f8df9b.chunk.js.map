{"version":3,"sources":["components/Header.js","components/Tile.js","components/Description.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","message","currentScore","topScore","Tile","onClick","handleTileClick","id","alt","name","src","image","Description","gameReset","array","forEach","checked","App","state","tiles","_this","tile","setState","topscore","slice","sort","Math","random","_this2","this","map","i","key","char","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.89f8df9b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Header(props){\n    return(\n        <header className=\"inner-container\">\n            <h1>Clicky Game</h1>\n            <div>{props.message}</div>\n            <div>\n                <div>Current Score: {props.currentScore}</div>\n                <div>Top Score: {props.topScore}</div>\n            </div>\n        </header>\n    )\n}\n","import React from \"react\";\n\nexport default function Tile(props) {\n    return(\n        <div className=\"tile\" onClick={()=>props.handleTileClick(props.id)}>\n            <img alt={props.name} src={props.image}/>\n            {/* {props.char} */}\n        </div>\n    )\n}","import React from \"react\";\n\nexport default function Description(props) {\n  return (\n    <div className=\"description\">\n      <h1>HOW TO PLAY:</h1>\n      <p>\n        Click on any of the images below to start the game. Once you've begun,\n        try and click as many images as you can without repeating yourself. If\n        you click an image twice, you start over!\n      </p>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport Tile from \"./components/Tile\";\r\nimport Description from \"./components/Description\";\r\n\r\nfunction gameReset(array) {\r\n  array.forEach(name => name.checked = false )\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    currentScore: 0,\r\n    topScore: 0,\r\n    message: \"You've Guessed Correctly\",\r\n    tiles: [\r\n      {\r\n        id: 0,\r\n        name: \"Robb\",\r\n        image: \"images/Robb.jpeg\"\r\n      },\r\n      {\r\n        id: 1,\r\n        name: \"Sansa\",\r\n        image: \"images/Sansa.jpg\"\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Jon\",\r\n        image: \"images/Jon.jpg\"\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"Tyrion\",\r\n        image: \"images/Tyrion.jpg\"\r\n      },\r\n      {\r\n        id: 4,\r\n        name: \"Cersei\",\r\n        image: \"images/Cersei.jpg\"\r\n      },\r\n      {\r\n        id: 5,\r\n        name: \"Jamie\",\r\n        image: \"images/Jamie.jpg\"\r\n      },\r\n      {\r\n        id: 6,\r\n        name: \"Drogo\",\r\n        image: \"images/Drogo.jpeg\"\r\n      },\r\n      {\r\n        id: 7,\r\n        name: \"Khaleesi\",\r\n        image: \"images/Khaleesi.jpg\"\r\n      },  \r\n      {\r\n        id: 8,\r\n        name: \"Ned Stark\",\r\n        image: \"images/Ned.jpeg\"\r\n      },\r\n      {\r\n        id: 9,\r\n        name: \"Night King\",\r\n        image: \"images/King.jpg\"\r\n      },\r\n      {\r\n        id: 10,\r\n        name: \"Grey Worm\",\r\n        image: \"images/Worm.jpeg\"\r\n      },\r\n      {\r\n        id: 11,\r\n        name: \"Theon Greyjoy\",\r\n        image: \"images/Theon.png\"\r\n      }\r\n    ]\r\n  };\r\n\r\n\r\n\r\n  \r\n\r\n  handleTileClick = id => {\r\n    //* check to see if this has been clicked before!\r\n    this.state.tiles.forEach(tile => {\r\n      if (tile.id === id) {\r\n        if (tile.checked === true) {\r\n          // console.log(\"you've clicked the same tile twice\");\r\n          this.setState({ message: \"Try Again!\" })\r\n          if (this.state.currentScore > this.state.topscore) {\r\n            this.setState({ topscore: this.state.currentScore });\r\n            this.setState({ currentScore: 0 });\r\n            gameReset(this.state.tiles)\r\n          } else{\r\n            this.setState({ currentScore: 0 });\r\n            gameReset(this.state.tiles)\r\n          }\r\n        } else {\r\n          tile.checked = true;\r\n          \r\n          //Update the score\r\n          this.setState({ currentScore: this.state.currentScore + 1 });\r\n        \r\n          //If the score is greater than the top score, update the top score too.\r\n          this.setState({ message: \"Well Done. Keep Going!\" });\r\n\r\n          //Randomize the tiles\r\n          let tiles = this.state.tiles.slice(0);\r\n          tiles.sort(() => Math.random() - 0.5);\r\n          this.setState({tiles});\r\n        }\r\n      }\r\n    });\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Header\r\n          currentScore={this.state.currentScore}\r\n          topScore={this.state.topScore}\r\n          message={this.state.message}\r\n        />\r\n        <Description />\r\n        <div className=\"game-board\">\r\n          {this.state.tiles.map((tile, i) => (\r\n            <Tile\r\n              key={i}\r\n              id={tile.id}\r\n              handleTileClick={this.handleTileClick}\r\n              char={tile.name}\r\n              image={tile.image}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}